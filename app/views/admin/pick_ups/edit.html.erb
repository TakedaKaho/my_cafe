<div class="container">
 <h2 class="text-center bg-dark text-white p-3" style="font-family: 'Arial', sans-serif;">P i c k U p  編 集</h2>
 
 <div class="row justify-content-center mt-4">
  <div class="col-md-8">
    
  <% if @pick_up.errors.any? %>
    <div class="alert alert-danger">
      <h6><%= pluralize(@pick_up.errors.count, "件のエラー") %> により変更を保存できませんでした。</h6>
      <ul>
        <% @pick_up.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  
  <%= form_with model: @pick_up, url: admin_pick_up_path(@pick_up), method: :patch, local: true, multipart: true, class: "pick-up-form" do |form| %>
  <div class="mb-4">
    <%= form.label :pick_up_images, "画像:3枚", class: "form-label" %>
    <%= form.file_field :pick_up_images, multiple: true, accept: "image/*", class: "form-control pick-up-image-input" %>
    <button type="button" class="ml-2 mt-2 btn btn-sm btn-outline-secondary add-file-field">画像を追加</button>
  </div>

  <h6>< preview ></h6>
  <div class="image-preview"></div>


    <h6>< 現在の画像 ></h6>
    <% @pick_up.pick_up_images.each do |image| %>
      <%= image_tag url_for(image), class: "img-thumbnail mt-2", style: "width: 100px; height: 100px; object-fit: cover;" %>
    <% end %>

    <div class="mb-3">
      <%= form.label :title, "タイトル:", class: "form-label" %>
      <%= form.text_field :title, required: true, class: "form-control" %>
    </div>

    <div class="mb-3">
      <%= form.label :body, "本文:", class: "form-label" %>
      <%= form.text_area :body, required: true, class: "form-control" %>
    </div>

    <div class="mb-3">
      <%= form.label :post_id, "関連するカフェ:", class: "form-label" %>
      <%= form.collection_select :post_id, Post.all, :id, :name, { prompt: "カフェを選択してください" }, class: "form-control" %>
    </div>

    <div class="mb-3 text-center">
      <%= form.submit "変更保存", class: "btn btn-primary" %>
    </div>
  <% end %>
  
  </div>
 </div>
</div>

<!--画像追加ボタン・プレビュー-->
<script>
document.addEventListener("turbolinks:load", function() {
  document.querySelectorAll(".pick-up-form").forEach(form => {
    const addButton = form.querySelector(".add-file-field");
    const imagePreviewContainer = form.querySelector(".image-preview");

    addButton.addEventListener("click", function() {
      const fileFields = form.querySelectorAll(".pick-up-image-input");
      if (fileFields.length < 3) { // 3つ未満の場合のみ追加
        const newFileField = fileFields[0].cloneNode(); // 最初のフィールドをクローン
        newFileField.value = ''; // クリアしてから追加
        newFileField.setAttribute('data-index', fileFields.length); // インデックスを設定
        fileFields[0].parentNode.insertBefore(newFileField, fileFields[0].nextSibling);

        newFileField.addEventListener('change', handleFileSelect);
      }
    });

    form.querySelectorAll(".pick-up-image-input").forEach(fileField => {
      if (!fileField.hasAttribute('data-listener-added')) {
        fileField.setAttribute('data-listener-added', 'true');
        fileField.addEventListener('change', handleFileSelect);
      }
    });

    function handleFileSelect(event) {
      const files = event.target.files;
      const fileField = event.target;
      const index = fileField.getAttribute('data-index'); // インデックスを取得

      Array.from(files).forEach(file => {
        const reader = new FileReader();

        reader.onload = function(event) {
          const imgContainer = document.createElement('div');
          imgContainer.classList.add('image-container');
          imgContainer.dataset.index = index; // インデックスを設定
          
          const imgElement = document.createElement('img');
          imgElement.src = event.target.result;
          imgElement.width = 100;
          imgElement.height = 100;
          imgElement.classList.add('img-thumbnail', 'mt-2');
          imgElement.style.objectFit = 'cover';
          
          const removeButton = document.createElement('button');
          removeButton.textContent = '削除';
          removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'mt-2');
          removeButton.addEventListener('click', function() {
            imgContainer.remove(); // 画像とボタンを含む親要素を削除
            // フォームフィールドの削除処理を追加
            const fileField = document.querySelector(`input.pick-up-image-input[data-index='${index}']`);
            if (fileField) {
              fileField.value = ''; // 対応するファイルフィールドをクリア
            }
          });
          
          imgContainer.appendChild(imgElement);
          imgContainer.appendChild(removeButton);
          imagePreviewContainer.appendChild(imgContainer);
        };

        reader.readAsDataURL(file);
      });
    }
  });
});

</script>
